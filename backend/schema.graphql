# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  role: String
  symptomReports(where: SymptomReportWhereInput! = {}, orderBy: [SymptomReportOrderByInput!]! = [], take: Int, skip: Int! = 0): [SymptomReport!]
  symptomReportsCount(where: SymptomReportWhereInput! = {}): Int
  therapeuticAssignments(where: TherapeuticAssignmentWhereInput! = {}, orderBy: [TherapeuticAssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0): [TherapeuticAssignment!]
  therapeuticAssignmentsCount(where: TherapeuticAssignmentWhereInput! = {}): Int
  therapeuticCaptures(where: TherapeuticCaptureWhereInput! = {}, orderBy: [TherapeuticCaptureOrderByInput!]! = [], take: Int, skip: Int! = 0): [TherapeuticCapture!]
  therapeuticCapturesCount(where: TherapeuticCaptureWhereInput! = {}): Int
  participatedStudies(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  participatedStudiesCount(where: StudyWhereInput! = {}): Int
  coordinatedStudies(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  coordinatedStudiesCount(where: StudyWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  role: StringNullableFilter
  symptomReports: SymptomReportManyRelationFilter
  therapeuticAssignments: TherapeuticAssignmentManyRelationFilter
  therapeuticCaptures: TherapeuticCaptureManyRelationFilter
  participatedStudies: StudyManyRelationFilter
  coordinatedStudies: StudyManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input SymptomReportManyRelationFilter {
  every: SymptomReportWhereInput
  some: SymptomReportWhereInput
  none: SymptomReportWhereInput
}

input TherapeuticAssignmentManyRelationFilter {
  every: TherapeuticAssignmentWhereInput
  some: TherapeuticAssignmentWhereInput
  none: TherapeuticAssignmentWhereInput
}

input TherapeuticCaptureManyRelationFilter {
  every: TherapeuticCaptureWhereInput
  some: TherapeuticCaptureWhereInput
  none: TherapeuticCaptureWhereInput
}

input StudyManyRelationFilter {
  every: StudyWhereInput
  some: StudyWhereInput
  none: StudyWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  role: String
  symptomReports: SymptomReportRelateToManyForUpdateInput
  therapeuticAssignments: TherapeuticAssignmentRelateToManyForUpdateInput
  therapeuticCaptures: TherapeuticCaptureRelateToManyForUpdateInput
  participatedStudies: StudyRelateToManyForUpdateInput
  coordinatedStudies: StudyRelateToManyForUpdateInput
}

input SymptomReportRelateToManyForUpdateInput {
  disconnect: [SymptomReportWhereUniqueInput!]
  set: [SymptomReportWhereUniqueInput!]
  create: [SymptomReportCreateInput!]
  connect: [SymptomReportWhereUniqueInput!]
}

input TherapeuticAssignmentRelateToManyForUpdateInput {
  disconnect: [TherapeuticAssignmentWhereUniqueInput!]
  set: [TherapeuticAssignmentWhereUniqueInput!]
  create: [TherapeuticAssignmentCreateInput!]
  connect: [TherapeuticAssignmentWhereUniqueInput!]
}

input TherapeuticCaptureRelateToManyForUpdateInput {
  disconnect: [TherapeuticCaptureWhereUniqueInput!]
  set: [TherapeuticCaptureWhereUniqueInput!]
  create: [TherapeuticCaptureCreateInput!]
  connect: [TherapeuticCaptureWhereUniqueInput!]
}

input StudyRelateToManyForUpdateInput {
  disconnect: [StudyWhereUniqueInput!]
  set: [StudyWhereUniqueInput!]
  create: [StudyCreateInput!]
  connect: [StudyWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  role: String
  symptomReports: SymptomReportRelateToManyForCreateInput
  therapeuticAssignments: TherapeuticAssignmentRelateToManyForCreateInput
  therapeuticCaptures: TherapeuticCaptureRelateToManyForCreateInput
  participatedStudies: StudyRelateToManyForCreateInput
  coordinatedStudies: StudyRelateToManyForCreateInput
}

input SymptomReportRelateToManyForCreateInput {
  create: [SymptomReportCreateInput!]
  connect: [SymptomReportWhereUniqueInput!]
}

input TherapeuticAssignmentRelateToManyForCreateInput {
  create: [TherapeuticAssignmentCreateInput!]
  connect: [TherapeuticAssignmentWhereUniqueInput!]
}

input TherapeuticCaptureRelateToManyForCreateInput {
  create: [TherapeuticCaptureCreateInput!]
  connect: [TherapeuticCaptureWhereUniqueInput!]
}

input StudyRelateToManyForCreateInput {
  create: [StudyCreateInput!]
  connect: [StudyWhereUniqueInput!]
}

type Symptom {
  id: ID!
  name: String
}

input SymptomWhereUniqueInput {
  id: ID
}

input SymptomWhereInput {
  AND: [SymptomWhereInput!]
  OR: [SymptomWhereInput!]
  NOT: [SymptomWhereInput!]
  id: IDFilter
  name: StringFilter
}

input SymptomOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SymptomUpdateInput {
  name: String
}

input SymptomUpdateArgs {
  where: SymptomWhereUniqueInput!
  data: SymptomUpdateInput!
}

input SymptomCreateInput {
  name: String
}

type SymptomReport {
  id: ID!
  user: User
  occurredOn: DateTime
  symptom: String
  notes: String
}

input SymptomReportWhereUniqueInput {
  id: ID
}

input SymptomReportWhereInput {
  AND: [SymptomReportWhereInput!]
  OR: [SymptomReportWhereInput!]
  NOT: [SymptomReportWhereInput!]
  id: IDFilter
  user: UserWhereInput
  occurredOn: DateTimeFilter
  symptom: StringFilter
  notes: StringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input SymptomReportOrderByInput {
  id: OrderDirection
  occurredOn: OrderDirection
  symptom: OrderDirection
  notes: OrderDirection
}

input SymptomReportUpdateInput {
  user: UserRelateToOneForUpdateInput
  occurredOn: DateTime
  symptom: String
  notes: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input SymptomReportUpdateArgs {
  where: SymptomReportWhereUniqueInput!
  data: SymptomReportUpdateInput!
}

input SymptomReportCreateInput {
  user: UserRelateToOneForCreateInput
  occurredOn: DateTime
  symptom: String
  notes: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Therapeutic {
  id: ID!
  name: String
  study: Study
}

input TherapeuticWhereUniqueInput {
  id: ID
}

input TherapeuticWhereInput {
  AND: [TherapeuticWhereInput!]
  OR: [TherapeuticWhereInput!]
  NOT: [TherapeuticWhereInput!]
  id: IDFilter
  name: StringFilter
  study: StudyWhereInput
}

input TherapeuticOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TherapeuticUpdateInput {
  name: String
  study: StudyRelateToOneForUpdateInput
}

input StudyRelateToOneForUpdateInput {
  create: StudyCreateInput
  connect: StudyWhereUniqueInput
  disconnect: Boolean
}

input TherapeuticUpdateArgs {
  where: TherapeuticWhereUniqueInput!
  data: TherapeuticUpdateInput!
}

input TherapeuticCreateInput {
  name: String
  study: StudyRelateToOneForCreateInput
}

input StudyRelateToOneForCreateInput {
  create: StudyCreateInput
  connect: StudyWhereUniqueInput
}

type TherapeuticAssignment {
  id: ID!
  user: User
  study: Study
  quantity: Int
  therapeuticAssignmentSteps(where: TherapeuticAssignmentStepWhereInput! = {}, orderBy: [TherapeuticAssignmentStepOrderByInput!]! = [], take: Int, skip: Int! = 0): [TherapeuticAssignmentStep!]
  therapeuticAssignmentStepsCount(where: TherapeuticAssignmentStepWhereInput! = {}): Int
  startDate: DateTime
  endDate: DateTime
}

input TherapeuticAssignmentWhereUniqueInput {
  id: ID
}

input TherapeuticAssignmentWhereInput {
  AND: [TherapeuticAssignmentWhereInput!]
  OR: [TherapeuticAssignmentWhereInput!]
  NOT: [TherapeuticAssignmentWhereInput!]
  id: IDFilter
  user: UserWhereInput
  study: StudyWhereInput
  quantity: IntFilter
  therapeuticAssignmentSteps: TherapeuticAssignmentStepManyRelationFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input TherapeuticAssignmentStepManyRelationFilter {
  every: TherapeuticAssignmentStepWhereInput
  some: TherapeuticAssignmentStepWhereInput
  none: TherapeuticAssignmentStepWhereInput
}

input TherapeuticAssignmentOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input TherapeuticAssignmentUpdateInput {
  user: UserRelateToOneForUpdateInput
  study: StudyRelateToOneForUpdateInput
  quantity: Int
  therapeuticAssignmentSteps: TherapeuticAssignmentStepRelateToManyForUpdateInput
  startDate: DateTime
  endDate: DateTime
}

input TherapeuticAssignmentStepRelateToManyForUpdateInput {
  disconnect: [TherapeuticAssignmentStepWhereUniqueInput!]
  set: [TherapeuticAssignmentStepWhereUniqueInput!]
  create: [TherapeuticAssignmentStepCreateInput!]
  connect: [TherapeuticAssignmentStepWhereUniqueInput!]
}

input TherapeuticAssignmentUpdateArgs {
  where: TherapeuticAssignmentWhereUniqueInput!
  data: TherapeuticAssignmentUpdateInput!
}

input TherapeuticAssignmentCreateInput {
  user: UserRelateToOneForCreateInput
  study: StudyRelateToOneForCreateInput
  quantity: Int
  therapeuticAssignmentSteps: TherapeuticAssignmentStepRelateToManyForCreateInput
  startDate: DateTime
  endDate: DateTime
}

input TherapeuticAssignmentStepRelateToManyForCreateInput {
  create: [TherapeuticAssignmentStepCreateInput!]
  connect: [TherapeuticAssignmentStepWhereUniqueInput!]
}

type TherapeuticAssignmentStep {
  id: ID!
  therapeuticAssignment: TherapeuticAssignment
  index: Int
  direction: String
  therapeuticCapture: TherapeuticCapture
}

input TherapeuticAssignmentStepWhereUniqueInput {
  id: ID
}

input TherapeuticAssignmentStepWhereInput {
  AND: [TherapeuticAssignmentStepWhereInput!]
  OR: [TherapeuticAssignmentStepWhereInput!]
  NOT: [TherapeuticAssignmentStepWhereInput!]
  id: IDFilter
  therapeuticAssignment: TherapeuticAssignmentWhereInput
  index: IntFilter
  direction: StringFilter
  therapeuticCapture: TherapeuticCaptureWhereInput
}

input TherapeuticAssignmentStepOrderByInput {
  id: OrderDirection
  index: OrderDirection
  direction: OrderDirection
}

input TherapeuticAssignmentStepUpdateInput {
  therapeuticAssignment: TherapeuticAssignmentRelateToOneForUpdateInput
  index: Int
  direction: String
  therapeuticCapture: TherapeuticCaptureRelateToOneForUpdateInput
}

input TherapeuticAssignmentRelateToOneForUpdateInput {
  create: TherapeuticAssignmentCreateInput
  connect: TherapeuticAssignmentWhereUniqueInput
  disconnect: Boolean
}

input TherapeuticCaptureRelateToOneForUpdateInput {
  create: TherapeuticCaptureCreateInput
  connect: TherapeuticCaptureWhereUniqueInput
  disconnect: Boolean
}

input TherapeuticAssignmentStepUpdateArgs {
  where: TherapeuticAssignmentStepWhereUniqueInput!
  data: TherapeuticAssignmentStepUpdateInput!
}

input TherapeuticAssignmentStepCreateInput {
  therapeuticAssignment: TherapeuticAssignmentRelateToOneForCreateInput
  index: Int
  direction: String
  therapeuticCapture: TherapeuticCaptureRelateToOneForCreateInput
}

input TherapeuticAssignmentRelateToOneForCreateInput {
  create: TherapeuticAssignmentCreateInput
  connect: TherapeuticAssignmentWhereUniqueInput
}

input TherapeuticCaptureRelateToOneForCreateInput {
  create: TherapeuticCaptureCreateInput
  connect: TherapeuticCaptureWhereUniqueInput
}

type TherapeuticCapture {
  id: ID!
  user: User
  occurredOn: DateTime
  therapeuticAssignmentSteps(where: TherapeuticAssignmentStepWhereInput! = {}, orderBy: [TherapeuticAssignmentStepOrderByInput!]! = [], take: Int, skip: Int! = 0): [TherapeuticAssignmentStep!]
  therapeuticAssignmentStepsCount(where: TherapeuticAssignmentStepWhereInput! = {}): Int
}

input TherapeuticCaptureWhereUniqueInput {
  id: ID
}

input TherapeuticCaptureWhereInput {
  AND: [TherapeuticCaptureWhereInput!]
  OR: [TherapeuticCaptureWhereInput!]
  NOT: [TherapeuticCaptureWhereInput!]
  id: IDFilter
  user: UserWhereInput
  occurredOn: DateTimeFilter
  therapeuticAssignmentSteps: TherapeuticAssignmentStepManyRelationFilter
}

input TherapeuticCaptureOrderByInput {
  id: OrderDirection
  occurredOn: OrderDirection
}

input TherapeuticCaptureUpdateInput {
  user: UserRelateToOneForUpdateInput
  occurredOn: DateTime
  therapeuticAssignmentSteps: TherapeuticAssignmentStepRelateToManyForUpdateInput
}

input TherapeuticCaptureUpdateArgs {
  where: TherapeuticCaptureWhereUniqueInput!
  data: TherapeuticCaptureUpdateInput!
}

input TherapeuticCaptureCreateInput {
  user: UserRelateToOneForCreateInput
  occurredOn: DateTime
  therapeuticAssignmentSteps: TherapeuticAssignmentStepRelateToManyForCreateInput
}

type Study {
  id: ID!
  name: String
  description: String
  therapeutics(where: TherapeuticWhereInput! = {}, orderBy: [TherapeuticOrderByInput!]! = [], take: Int, skip: Int! = 0): [Therapeutic!]
  therapeuticsCount(where: TherapeuticWhereInput! = {}): Int
  therapeuticAssignments(where: TherapeuticAssignmentWhereInput! = {}, orderBy: [TherapeuticAssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0): [TherapeuticAssignment!]
  therapeuticAssignmentsCount(where: TherapeuticAssignmentWhereInput! = {}): Int
  participants(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  participantsCount(where: UserWhereInput! = {}): Int
  coordinators(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  coordinatorsCount(where: UserWhereInput! = {}): Int
  startDate: DateTime
  endDate: DateTime
}

input StudyWhereUniqueInput {
  id: ID
}

input StudyWhereInput {
  AND: [StudyWhereInput!]
  OR: [StudyWhereInput!]
  NOT: [StudyWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  therapeutics: TherapeuticManyRelationFilter
  therapeuticAssignments: TherapeuticAssignmentManyRelationFilter
  participants: UserManyRelationFilter
  coordinators: UserManyRelationFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
}

input TherapeuticManyRelationFilter {
  every: TherapeuticWhereInput
  some: TherapeuticWhereInput
  none: TherapeuticWhereInput
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input StudyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input StudyUpdateInput {
  name: String
  description: String
  therapeutics: TherapeuticRelateToManyForUpdateInput
  therapeuticAssignments: TherapeuticAssignmentRelateToManyForUpdateInput
  participants: UserRelateToManyForUpdateInput
  coordinators: UserRelateToManyForUpdateInput
  startDate: DateTime
  endDate: DateTime
}

input TherapeuticRelateToManyForUpdateInput {
  disconnect: [TherapeuticWhereUniqueInput!]
  set: [TherapeuticWhereUniqueInput!]
  create: [TherapeuticCreateInput!]
  connect: [TherapeuticWhereUniqueInput!]
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input StudyUpdateArgs {
  where: StudyWhereUniqueInput!
  data: StudyUpdateInput!
}

input StudyCreateInput {
  name: String
  description: String
  therapeutics: TherapeuticRelateToManyForCreateInput
  therapeuticAssignments: TherapeuticAssignmentRelateToManyForCreateInput
  participants: UserRelateToManyForCreateInput
  coordinators: UserRelateToManyForCreateInput
  startDate: DateTime
  endDate: DateTime
}

input TherapeuticRelateToManyForCreateInput {
  create: [TherapeuticCreateInput!]
  connect: [TherapeuticWhereUniqueInput!]
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSymptom(data: SymptomCreateInput!): Symptom
  createSymptoms(data: [SymptomCreateInput!]!): [Symptom]
  updateSymptom(where: SymptomWhereUniqueInput!, data: SymptomUpdateInput!): Symptom
  updateSymptoms(data: [SymptomUpdateArgs!]!): [Symptom]
  deleteSymptom(where: SymptomWhereUniqueInput!): Symptom
  deleteSymptoms(where: [SymptomWhereUniqueInput!]!): [Symptom]
  createSymptomReport(data: SymptomReportCreateInput!): SymptomReport
  createSymptomReports(data: [SymptomReportCreateInput!]!): [SymptomReport]
  updateSymptomReport(where: SymptomReportWhereUniqueInput!, data: SymptomReportUpdateInput!): SymptomReport
  updateSymptomReports(data: [SymptomReportUpdateArgs!]!): [SymptomReport]
  deleteSymptomReport(where: SymptomReportWhereUniqueInput!): SymptomReport
  deleteSymptomReports(where: [SymptomReportWhereUniqueInput!]!): [SymptomReport]
  createTherapeutic(data: TherapeuticCreateInput!): Therapeutic
  createTherapeutics(data: [TherapeuticCreateInput!]!): [Therapeutic]
  updateTherapeutic(where: TherapeuticWhereUniqueInput!, data: TherapeuticUpdateInput!): Therapeutic
  updateTherapeutics(data: [TherapeuticUpdateArgs!]!): [Therapeutic]
  deleteTherapeutic(where: TherapeuticWhereUniqueInput!): Therapeutic
  deleteTherapeutics(where: [TherapeuticWhereUniqueInput!]!): [Therapeutic]
  createTherapeuticAssignment(data: TherapeuticAssignmentCreateInput!): TherapeuticAssignment
  createTherapeuticAssignments(data: [TherapeuticAssignmentCreateInput!]!): [TherapeuticAssignment]
  updateTherapeuticAssignment(where: TherapeuticAssignmentWhereUniqueInput!, data: TherapeuticAssignmentUpdateInput!): TherapeuticAssignment
  updateTherapeuticAssignments(data: [TherapeuticAssignmentUpdateArgs!]!): [TherapeuticAssignment]
  deleteTherapeuticAssignment(where: TherapeuticAssignmentWhereUniqueInput!): TherapeuticAssignment
  deleteTherapeuticAssignments(where: [TherapeuticAssignmentWhereUniqueInput!]!): [TherapeuticAssignment]
  createTherapeuticAssignmentStep(data: TherapeuticAssignmentStepCreateInput!): TherapeuticAssignmentStep
  createTherapeuticAssignmentSteps(data: [TherapeuticAssignmentStepCreateInput!]!): [TherapeuticAssignmentStep]
  updateTherapeuticAssignmentStep(where: TherapeuticAssignmentStepWhereUniqueInput!, data: TherapeuticAssignmentStepUpdateInput!): TherapeuticAssignmentStep
  updateTherapeuticAssignmentSteps(data: [TherapeuticAssignmentStepUpdateArgs!]!): [TherapeuticAssignmentStep]
  deleteTherapeuticAssignmentStep(where: TherapeuticAssignmentStepWhereUniqueInput!): TherapeuticAssignmentStep
  deleteTherapeuticAssignmentSteps(where: [TherapeuticAssignmentStepWhereUniqueInput!]!): [TherapeuticAssignmentStep]
  createTherapeuticCapture(data: TherapeuticCaptureCreateInput!): TherapeuticCapture
  createTherapeuticCaptures(data: [TherapeuticCaptureCreateInput!]!): [TherapeuticCapture]
  updateTherapeuticCapture(where: TherapeuticCaptureWhereUniqueInput!, data: TherapeuticCaptureUpdateInput!): TherapeuticCapture
  updateTherapeuticCaptures(data: [TherapeuticCaptureUpdateArgs!]!): [TherapeuticCapture]
  deleteTherapeuticCapture(where: TherapeuticCaptureWhereUniqueInput!): TherapeuticCapture
  deleteTherapeuticCaptures(where: [TherapeuticCaptureWhereUniqueInput!]!): [TherapeuticCapture]
  createStudy(data: StudyCreateInput!): Study
  createStudies(data: [StudyCreateInput!]!): [Study]
  updateStudy(where: StudyWhereUniqueInput!, data: StudyUpdateInput!): Study
  updateStudies(data: [StudyUpdateArgs!]!): [Study]
  deleteStudy(where: StudyWhereUniqueInput!): Study
  deleteStudies(where: [StudyWhereUniqueInput!]!): [Study]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  symptoms(where: SymptomWhereInput! = {}, orderBy: [SymptomOrderByInput!]! = [], take: Int, skip: Int! = 0): [Symptom!]
  symptom(where: SymptomWhereUniqueInput!): Symptom
  symptomsCount(where: SymptomWhereInput! = {}): Int
  symptomReports(where: SymptomReportWhereInput! = {}, orderBy: [SymptomReportOrderByInput!]! = [], take: Int, skip: Int! = 0): [SymptomReport!]
  symptomReport(where: SymptomReportWhereUniqueInput!): SymptomReport
  symptomReportsCount(where: SymptomReportWhereInput! = {}): Int
  therapeutics(where: TherapeuticWhereInput! = {}, orderBy: [TherapeuticOrderByInput!]! = [], take: Int, skip: Int! = 0): [Therapeutic!]
  therapeutic(where: TherapeuticWhereUniqueInput!): Therapeutic
  therapeuticsCount(where: TherapeuticWhereInput! = {}): Int
  therapeuticAssignments(where: TherapeuticAssignmentWhereInput! = {}, orderBy: [TherapeuticAssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0): [TherapeuticAssignment!]
  therapeuticAssignment(where: TherapeuticAssignmentWhereUniqueInput!): TherapeuticAssignment
  therapeuticAssignmentsCount(where: TherapeuticAssignmentWhereInput! = {}): Int
  therapeuticAssignmentSteps(where: TherapeuticAssignmentStepWhereInput! = {}, orderBy: [TherapeuticAssignmentStepOrderByInput!]! = [], take: Int, skip: Int! = 0): [TherapeuticAssignmentStep!]
  therapeuticAssignmentStep(where: TherapeuticAssignmentStepWhereUniqueInput!): TherapeuticAssignmentStep
  therapeuticAssignmentStepsCount(where: TherapeuticAssignmentStepWhereInput! = {}): Int
  therapeuticCaptures(where: TherapeuticCaptureWhereInput! = {}, orderBy: [TherapeuticCaptureOrderByInput!]! = [], take: Int, skip: Int! = 0): [TherapeuticCapture!]
  therapeuticCapture(where: TherapeuticCaptureWhereUniqueInput!): TherapeuticCapture
  therapeuticCapturesCount(where: TherapeuticCaptureWhereInput! = {}): Int
  studies(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  study(where: StudyWhereUniqueInput!): Study
  studiesCount(where: StudyWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
